(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{506:function(s,n,e){"use strict";e.r(n);var t=e(4),r=Object(t.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h4",{attrs:{id:"powermock如何引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#powermock如何引用"}},[s._v("#")]),s._v(" PowerMock如何引用")]),s._v(" "),e("ul",[e("li",[s._v("mock对象就是在调试期间用来作为真实对象的替代品")]),s._v(" "),e("li",[s._v("mock测试就是在测试过程中，对那些不容易构建的对象用一个虚拟对象来代替测试的方法就叫mock测试")])]),s._v(" "),e("h5",{attrs:{id:"maven项目可以添加以下依赖获取"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maven项目可以添加以下依赖获取"}},[s._v("#")]),s._v(" Maven项目可以添加以下依赖获取")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("\n<properties>  \n \t<powermock.version>1.5.6</powermock.version>  \n</properties>\n\n<dependencies>\n\t<dependency>  \n\t <groupId>org.powermock</groupId>  \n\t <artifactId>powermock-module-junit4</artifactId>  \n\t <version>${powermock.version}</version>  \n\t <scope>test</scope>  \n\t</dependency>  \n\t<dependency>  \n\t <groupId>org.powermock</groupId>  \n\t <artifactId>powermock-api-mockito</artifactId>  \n\t <version>${powermock.version}</version>  \n\t <scope>test</scope>  \n\t</dependency>\n</dependencies>\n\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br")])]),e("h4",{attrs:{id:"powermock注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#powermock注解"}},[s._v("#")]),s._v(" PowerMock注解")]),s._v(" "),e("ul",[e("li",[s._v("@RunWith(PowerMockRunner.class)")])]),s._v(" "),e("blockquote",[e("p",[s._v("@RunWith 就是显式的告诉 Junit 使用某个指定的 Runner 来运行 Test Case，我"),e("br"),s._v("\n们使用了 PowerMockRunner 来运行我们的测试用例，如果不指定的话我们就默认使用的"),e("br"),s._v("\n是 Junit 提供的 Runner.\n"),e("img",{attrs:{src:"/img/Runner.png",alt:"Runner 家族成员"}})])]),s._v(" "),e("ul",[e("li",[s._v("@PrepareForTest( { YourClassWithEgStaticMethod.class })")])]),s._v(" "),e("blockquote",[e("p",[s._v("如果你的测试用例里没有使用注解@PrepareForTest，那么可以不用加注解@RunWith(PowerMockRunner.class)，反之亦然。当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解@PrepareForTest")])]),s._v(" "),e("ul",[e("li",[s._v("@Mock")])]),s._v(" "),e("blockquote",[e("p",[s._v("创建一个Mock")])]),s._v(" "),e("ul",[e("li",[s._v("@InjectMocks")])]),s._v(" "),e("blockquote",[e("p",[s._v("创建一个实例，简单的说是这个Mock可以调用真实代码的方法，其余用@Mock（或@Spy）注解创建的mock将被注入到用该实例中。注意：必须使用"),e("code",[s._v("@RunWith(MockitoJUnitRunner.class)")]),s._v(" 或 "),e("code",[s._v("Mockito.initMocks(this)")]),s._v("进行mocks的初始化和注入。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('package com.test.demo.pdf2xls4x3;  \n  \nimport com.test.common.core.StringUtils.DateStringUtils;  \nimport org.junit.Before;  \nimport org.junit.Test;  \nimport org.junit.runner.RunWith;  \nimport org.mockito.InjectMocks;  \nimport org.mockito.Mockito;  \nimport org.mockito.MockitoAnnotations;  \nimport org.powermock.core.classloader.annotations.PrepareForTest;  \nimport org.powermock.modules.junit4.PowerMockRunner;  \n  \nimport static org.junit.Assert.*;  \n  \n@RunWith(PowerMockRunner.class)  \n@PrepareForTest({OrderStringUtils.class, DateStringUtils.class})  \npublic class Demo2Test {  \n  \n  \n @InjectMocks  // 创建一个实例对象，用于调用真实代码\n private Demo2 Demo2 = new Demo2();  \n  \n @Before  \n public void setUp() {  \n  // Mock初始化\n  MockitoAnnotations.initMocks(this);  \n }  \n  \n @Test  \n public void Demo23Order() {  \n String[] text={"A1","A2"};  \n Demo2.Demo23Order(text);  \n }  \n}\n\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br")])]),e("ul",[e("li",[s._v('@PowerMockIgnore("javax.management.*")')])]),s._v(" "),e("blockquote",[e("p",[s._v("为了解决使用powermock后，提示classloade\tr错误")])]),s._v(" "),e("h4",{attrs:{id:"powermock简单实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#powermock简单实现原理"}},[s._v("#")]),s._v(" PowerMock简单实现原理")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("当某个测试方法被注解@PrepareForTest标注以后，在运行测试用例时，会创建一个新的org.powermock.core.classloader.MockClassLoader实例，然后加载该测试用例使用到的类（系统类除外）。")])]),s._v(" "),e("li",[e("p",[s._v("PowerMock会根据你的mock要求，去修改写在注解@PrepareForTest里的class文件（当前测试类会自动加入注解中），以满足特殊的mock需求。例如：去除final方法的final标识，在静态方法的最前面加入自己的虚拟实现等。")])]),s._v(" "),e("li",[e("p",[s._v("如果需要mock的是系统类的final方法和静态方法，PowerMock不会直接修改系统类的class文件，而是修改调用系统类的class文件，以满足mock需求。")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);