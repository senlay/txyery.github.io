(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{526:function(n,s,a){"use strict";a.r(s);var e=a(4),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h4",{attrs:{id:"散列查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#散列查找"}},[n._v("#")]),n._v(" 散列查找")]),n._v(" "),a("ul",[a("li",[n._v("常用的查找方法")])]),n._v(" "),a("blockquote",[a("ul",[a("li",[n._v("顺序查找 O(N)")]),n._v(" "),a("li",[n._v("二分查找(静态查找) O(log2 N)")]),n._v(" "),a("li",[n._v("二叉查找 O(h) h为二叉树的高度")]),n._v(" "),a("li",[n._v("平衡二叉查找 O(log2 N)")])])]),n._v(" "),a("ul",[a("li",[n._v("查找的本质")])]),n._v(" "),a("blockquote",[a("p",[n._v("已知对象查找位置，即根据关键值KEY查找位置\n那么如何排列才能快速找出位置呢？")]),n._v(" "),a("ul",[a("li",[n._v("有序安排对象：全部按照顺序或者半序")]),n._v(" "),a("li",[n._v("直接 “计算出” 对象位置：散列")])])]),n._v(" "),a("ul",[a("li",[n._v("散列的前提要求")])]),n._v(" "),a("blockquote",[a("ul",[a("li",[n._v("计算位置：执行散列函数计算出关键值存储的位置")]),n._v(" "),a("li",[n._v("解决冲突：应用某种策略解决多个关键值相同的问题")])])]),n._v(" "),a("ul",[a("li",[n._v("时间复杂度")])]),n._v(" "),a("blockquote",[a("p",[n._v("O(1),最低时间复杂度，耗时/耗空间与输入数据的大小无关，无论输入数据量增大多少倍，耗时/耗空间都不变，即无论数据规模多大，都可以在一次计算后找到目标（不考虑冲突的话）")])]),n._v(" "),a("blockquote",[a("p",[n._v("注意：算法复杂度时,常用o(1), o(n), o(logn), o(nlogn)表示对应算法的时间复杂度，是算法的时空复杂度的表示。不仅仅用于表示时间复杂度，也用于表示空间复杂度。\nO后面的括号中有一个函数，指明某个算法的耗时/耗空间与数据增长量之间的关系。其中的n代表输入数据的量。 \n比如时间复杂度为O(n)，就代表数据输入量增大n倍，耗时也增大n倍。比如常见的遍历算法。再比如时间复杂度O(n^2)，就代表数据量增大n倍时，耗时增大n的平方倍，这是比线性更高的时间复杂度。比如冒泡排序，就是典型的O(n^2)的算法，对n个数排序，需要扫描n×n次。 \n再比如O(logn)，当数据增大n倍时，耗时增大logn倍（这里的log是以2为底的，比如，当数据增大256倍时，耗时只增大8倍，是比线性还要低的时间复杂度）。二分查找就是O(logn)的算法，每找一次排除一半的可能，256个数据中查找只要找8次就可以找到目标。 \nO(nlogn)同理，就是n乘以logn，当数据增大256倍时，耗时增大256*8=2048倍。这个复杂度高于线性低于平方。归并排序就是O(nlogn)的时间复杂度。")])]),n._v(" "),a("ul",[a("li",[n._v("散列的基本思想")])]),n._v(" "),a("blockquote",[a("p",[n._v("以关键值key为自变量，通过一个函数h(key)得出函数值，作为数据对象的存储地址；然而，正如事情皆有巧合一般，不同的key经过h(key)计算得出的函数值可能相等，那么这种情况我们认为是散列冲突，即h(key1)=h(key2),\n那么此时就需要一种策略去解决冲突，java中HashMap则是通过拉链法解决冲突的，即将冲突对象放在链表的下一个节点")])]),n._v(" "),a("ul",[a("li",[n._v("影响散列查找效率的因素")])]),n._v(" "),a("blockquote",[a("ul",[a("li",[n._v("装载因子: 假设散列表容量的大小为M，填入表中的个数为N，那么装载因子=N/M,如HashMap中 装载因子默认为0.75，默认容量为16，即：0.75=12/16\n装载因子越大散列冲突的概率越大，越小冲突越小")]),n._v(" "),a("li",[n._v("散列函数：该函数应尽量使数据对象分布均匀，减少冲突，常用算法：通过模运算使数据充分分布均匀，HashMap中则是通过n-1（n为数组长度）&hash计算，实则也是通过这一方法分配位置")])])]),n._v(" "),a("p",[a("img",{attrs:{src:"/img/hash.png",alt:""}})]),n._v(" "),a("h4",{attrs:{id:"红黑树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[n._v("#")]),n._v(" 红黑树")]),n._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/e136ec79235c",target:"_blank",rel:"noopener noreferrer"}},[n._v("了解红黑树"),a("OutboundLink")],1)])]),n._v(" "),a("h4",{attrs:{id:"hashmap概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap概述"}},[n._v("#")]),n._v(" HashMap概述")]),n._v(" "),a("p",[a("img",{attrs:{src:"/img/HashMap.png",alt:""}})]),n._v(" "),a("ul",[a("li",[n._v("属于集合框架范畴，位于util包下")]),n._v(" "),a("li",[n._v("继承AbstractMap")]),n._v(" "),a("li",[n._v("实现Map<K,V>, Cloneable, Serializable")]),n._v(" "),a("li",[n._v("JDK1.8中采用entry数组+链表+红黑树实现")]),n._v(" "),a("li",[n._v("使用链表解决哈希碰撞，将同一个hash值存储在一个链表的不同节点")]),n._v(" "),a("li",[n._v("当阈值大于8以后将链表转换为红黑树")]),n._v(" "),a("li",[n._v("HashMap基于hashing原理，我们通过put()和get()方法储存和获取对象。当我们将键值对传递给put()方法时，它调用键对象的hashCode()方法来计算hashcode，让后找到bucket位置来储存值对象。当获取对象时，通过键对象的equals()方法找到正确的键值对，然后返回值对象。HashMap使用链表来解决碰撞问题，当发生碰撞了，对象将会储存在链表的下一个节点中。 HashMap在每个链表节点中储存键值对对象。")]),n._v(" "),a("li",[n._v("HashMap 通过 key 的 hashCode经过扰动函数处理过后得到hash值。然后通过 (n-1) & hash 判断当前元素存放的位置(n 指的是数组长度)。如果当前位置存在 元素的话,判断此元素 hash 值以及 key 是否相同,相同的话直接覆盖,不相同通过拉链法解决冲突。")])]),n._v(" "),a("blockquote",[a("ul",[a("li",[n._v("拉链法又叫链地址法，Java中的HashMap在存储数据的时候就是用的拉链法来实现的，拉链发就是把具有相同散列地址的关键字(同义词)值放在同一个单链表中，称为同义词链表。")]),n._v(" "),a("li",[n._v("扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。")])])]),n._v(" "),a("ul",[a("li",[a("p",[n._v("优点：一对一的查找效率很高；")])]),n._v(" "),a("li",[a("p",[n._v("缺点：一个关键字可能对应多个散列地址；需要查找一个范围时，效果不好。")])]),n._v(" "),a("li",[a("p",[n._v("散列冲突：不同的关键字经过散列函数的计算得到了相同的散列地址。")])]),n._v(" "),a("li",[a("p",[n._v("好的散列函数=计算简单+分布均匀（计算得到的散列地址分布均匀）")])]),n._v(" "),a("li",[a("p",[n._v("哈希表是种数据结构，它可以提供快速的插入操作和查找操作。")])]),n._v(" "),a("li",[a("p",[n._v("成员变量")])])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    /**\n        * The default initial capacity - MUST be a power of two.\n          默认容量必须为2的幂，初始容量为16\n        */\n       static final int DEFAULT_INITIAL_CAPACITY = 1 << 4; // aka 16\n   \n       /**\n        * The maximum capacity, used if a higher value is implicitly specified\n        * by either of the constructors with arguments.\n        * MUST be a power of two <= 1<<30.\n         最大容量小于等于1<<30\n        */\n       static final int MAXIMUM_CAPACITY = 1 << 30;\n   \n       /**\n        * The load factor used when none specified in constructor.\n        负载因子默认为0.75\n        */\n       static final float DEFAULT_LOAD_FACTOR = 0.75f;\n   \n       /**\n        * The bin count threshold for using a tree rather than list for a\n        * bin.  Bins are converted to trees when adding an element to a\n        * bin with at least this many nodes. The value must be greater\n        * than 2 and should be at least 8 to mesh with assumptions in\n        * tree removal about conversion back to plain bins upon\n        * shrinkage.\n        //当桶(bucket)上的结点数大于这个值时会转成红黑树\n        */\n       static final int TREEIFY_THRESHOLD = 8;\n   \n       /**\n        * The bin count threshold for untreeifying a (split) bin during a\n        * resize operation. Should be less than TREEIFY_THRESHOLD, and at\n        * most 6 to mesh with shrinkage detection under removal.\n        // 当桶(bucket)上的结点数小于这个值时树转链表\n        */\n       static final int UNTREEIFY_THRESHOLD = 6;\n   \n       /**\n        * The smallest table capacity for which bins may be treeified.\n        * (Otherwise the table is resized if too many nodes in a bin.)\n        * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts\n        * between resizing and treeification thresholds.\n        // 桶中结构转化为红黑树对应的table的最小大小\n        */\n       static final int MIN_TREEIFY_CAPACITY = 64;\n       \n       \n         /* ---------------- Fields -------------- */\n       \n           /**\n            * The table, initialized on first use, and resized as\n            * necessary. When allocated, length is always a power of two.\n            * (We also tolerate length zero in some operations to allow\n            * bootstrapping mechanics that are currently not needed.)\n            哈希桶，存放链表。 长度是2的N次方，或者初始化时为0.\n            */\n           transient Node<K,V>[] table;\n       \n           /**\n            * Holds cached entrySet(). Note that AbstractMap fields are used\n            * for keySet() and values().\n             存放具体元素的集合\n            */\n           transient Set<Map.Entry<K,V>> entrySet;\n       \n           /**\n            * The number of key-value mappings contained in this map.\n            // 存放元素的个数，注意这个不等于数组的长度。此映射中包含的键-值映射数\n            */\n           transient int size;\n       \n           /**\n            * The number of times this HashMap has been structurally modified\n            * Structural modifications are those that change the number of mappings in\n            * the HashMap or otherwise modify its internal structure (e.g.,\n            * rehash).  This field is used to make iterators on Collection-views of\n            * the HashMap fail-fast.  (See ConcurrentModificationException).\n            */\n           transient int modCount;\n       \n           /**\n            * The next size value at which to resize (capacity * load factor).\n            *\n            * @serial\n            */\n           // (The javadoc description is true upon serialization.\n           // Additionally, if the table array has not been allocated, this\n           // field holds the initial array capacity, or zero signifying\n           // DEFAULT_INITIAL_CAPACITY.)\n           //哈希表内元素数量的阈值，当哈希表内元素数量超过阈值时，会发生扩容resize()\n            调整为：容量*负载因子，需要注意的是，当超过16*0.75时候，将扩容为原来的2倍\n           int threshold;\n       \n           /**\n            * The load factor for the hash table.\n            * \n            * @serial\n            //加载因子，用于计算哈希表元素数量的阈值。  threshold = 哈希桶.length * loadFactor;\n            */\n           final float loadFactor;\n       \n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br"),a("span",{staticClass:"line-number"},[n._v("87")]),a("br"),a("span",{staticClass:"line-number"},[n._v("88")]),a("br"),a("span",{staticClass:"line-number"},[n._v("89")]),a("br"),a("span",{staticClass:"line-number"},[n._v("90")]),a("br"),a("span",{staticClass:"line-number"},[n._v("91")]),a("br"),a("span",{staticClass:"line-number"},[n._v("92")]),a("br"),a("span",{staticClass:"line-number"},[n._v("93")]),a("br"),a("span",{staticClass:"line-number"},[n._v("94")]),a("br"),a("span",{staticClass:"line-number"},[n._v("95")]),a("br"),a("span",{staticClass:"line-number"},[n._v("96")]),a("br"),a("span",{staticClass:"line-number"},[n._v("97")]),a("br"),a("span",{staticClass:"line-number"},[n._v("98")]),a("br"),a("span",{staticClass:"line-number"},[n._v("99")]),a("br"),a("span",{staticClass:"line-number"},[n._v("100")]),a("br"),a("span",{staticClass:"line-number"},[n._v("101")]),a("br"),a("span",{staticClass:"line-number"},[n._v("102")]),a("br"),a("span",{staticClass:"line-number"},[n._v("103")]),a("br")])]),a("ul",[a("li",[n._v("哈希桶NODE的结构")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('  static class Node<K,V> implements Map.Entry<K,V> {\n         final int hash;\n         final K key;\n         V value;\n         Node<K,V> next;\n \n         Node(int hash, K key, V value, Node<K,V> next) {\n             this.hash = hash;\n             this.key = key;\n             this.value = value;\n             this.next = next;\n         }\n \n         public final K getKey()        { return key; }\n         public final V getValue()      { return value; }\n         public final String toString() { return key + "=" + value; }\n \n         public final int hashCode() {\n             return Objects.hashCode(key) ^ Objects.hashCode(value);\n         }\n \n         public final V setValue(V newValue) {\n             V oldValue = value;\n             value = newValue;\n             return oldValue;\n         }\n \n         public final boolean equals(Object o) {\n             if (o == this)\n                 return true;\n             if (o instanceof Map.Entry) {\n                 Map.Entry<?,?> e = (Map.Entry<?,?>)o;\n                 if (Objects.equals(key, e.getKey()) &&\n                     Objects.equals(value, e.getValue()))\n                     return true;\n             }\n             return false;\n         }\n     }\n        \n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br")])]),a("blockquote",[a("p",[n._v("Node实现Map.Entry<K,V>，成员变量有key（final修改不可变）、value（可变）、hash（final修改不可变）、next（下一个节点）")])]),n._v(" "),a("ul",[a("li",[n._v("增加（put）")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("    public V put(K key, V value) {\n        return putVal(hash(key), key, value, false, true);\n    }\n    \n     final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                       boolean evict) {\n            Node<K,V>[] tab; Node<K,V> p; int n, i;\n            if ((tab = table) == null || (n = tab.length) == 0)\n                n = (tab = resize()).length;\n            if ((p = tab[i = (n - 1) & hash]) == null)\n                tab[i] = newNode(hash, key, value, null);\n            else {\n                Node<K,V> e; K k;\n                if (p.hash == hash &&\n                    ((k = p.key) == key || (key != null && key.equals(k))))\n                    e = p;\n                else if (p instanceof TreeNode)\n                    e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n                else {\n                    for (int binCount = 0; ; ++binCount) {\n                        if ((e = p.next) == null) {\n                            p.next = newNode(hash, key, value, null);\n                            if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                                treeifyBin(tab, hash);\n                            break;\n                        }\n                        if (e.hash == hash &&\n                            ((k = e.key) == key || (key != null && key.equals(k))))\n                            break;\n                        p = e;\n                    }\n                }\n                if (e != null) { // existing mapping for key\n                    V oldValue = e.value;\n                    if (!onlyIfAbsent || oldValue == null)\n                        e.value = value;\n                    afterNodeAccess(e);\n                    return oldValue;\n                }\n            }\n            ++modCount;\n            if (++size > threshold)\n                resize();\n            afterNodeInsertion(evict);\n            return null;\n        }\n    \n\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br")])]),a("ul",[a("li",[n._v("查询（get）")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(" public V get(Object key) {\n        Node<K,V> e;\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\n    }\n \n    final Node<K,V> getNode(int hash, Object key) {\n         Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n         if ((tab = table) != null && (n = tab.length) > 0 &&\n             (first = tab[(n - 1) & hash]) != null) {\n             if (first.hash == hash && // always check first node\n                 ((k = first.key) == key || (key != null && key.equals(k))))\n                 return first;\n             if ((e = first.next) != null) {\n                 if (first instanceof TreeNode)\n                     return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n                 do {\n                     if (e.hash == hash &&\n                         ((k = e.key) == key || (key != null && key.equals(k))))\n                         return e;\n                 } while ((e = e.next) != null);\n             }\n         }\n         return null;\n     }   \n    \n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);