(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{511:function(t,a,v){"use strict";v.r(a);var _=v(4),e=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("div",{staticClass:"custom-block tip"},[v("p",[t._v("开发中常用概念")])]),t._v(" "),v("h4",{attrs:{id:"系统吞吐量"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#系统吞吐量"}},[t._v("#")]),t._v(" 系统吞吐量")]),t._v(" "),v("blockquote",[v("p",[t._v("指系统在某一时间所能处理的数据总量，一般可以用系统每秒处理的总数据量来衡量。")])]),t._v(" "),v("h5",{attrs:{id:"系统吞吐量要素-多快好省"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#系统吞吐量要素-多快好省"}},[t._v("#")]),t._v(" 系统吞吐量要素,“多快好省”")]),t._v(" "),v("ul",[v("li",[t._v("TPS指标(Transations Per Second)")])]),t._v(" "),v("blockquote",[v("p",[t._v("每秒传输的事务处理个数,越多越好！")])]),t._v(" "),v("ul",[v("li",[t._v("QPS(每秒查询率)(Query Per Second)")])]),t._v(" "),v("blockquote",[v("p",[t._v("每秒可查询数据量，越多越好！也指每秒的响应请求数，即是最大吞吐能力。QPS=并发量/平均响应时间 ；并发量=QPS*平均响应时间")])]),t._v(" "),v("ul",[v("li",[t._v("RT (响应时间)")])]),t._v(" "),v("blockquote",[v("p",[t._v("指系统对请求作出响应的时间。越快越好！")])]),t._v(" "),v("h4",{attrs:{id:"tp指标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tp指标"}},[t._v("#")]),t._v(" TP指标")]),t._v(" "),v("blockquote",[v("p",[t._v("Top Percentile，Top百分数，是一个统计学里的术语，与平均数、中位数都是一类。\nTP50、TP90和TP99等指标常用于系统性能监控场景，指高于50%、90%、99%等百分线的情况。\n一定时间内，每次调用所消耗的时间，并将这些时间按从小到大的顺序进行排序。")])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("TP50 指在一个时间段内（如5分钟），统计该方法每次调用所消耗的时间，并将这些时间按从小到大的顺序进行排序，取第50%的那个值作为TP50 值；\n配置此监控指标对应的报警阀值后，需要保证在这个时间段内该方法所有调用的消耗时间至少有50%的  值要小于此阀值，否则系统将会报警。")])]),t._v(" "),v("li",[v("p",[t._v("TP90，TP99，TP999与TP50值计算方式一致，它们分别代表着对方法的不同性能要求，TP50相对较低，TP90则比较高，TP99，TP999则对方法性能要求很高。")])]),t._v(" "),v("li",[v("p",[t._v("TP和均值的重要区别是：TP是直接按照位置取值，均值一般要除以个数。所以当TP的取得越高，则值往往越大。")])])]),t._v(" "),v("h4",{attrs:{id:"分布式系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统"}},[t._v("#")]),t._v(" 分布式系统")]),t._v(" "),v("blockquote",[v("p",[t._v("分布式系统就是多台计算机解决单台计算机所不能处理的计算、存储等问题。单系统与多系统区别，即在于处理计算、存储以及规模。")])]),t._v(" "),v("h4",{attrs:{id:"分布式系统架构的优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#分布式系统架构的优势"}},[t._v("#")]),t._v(" 分布式系统架构的优势")]),t._v(" "),v("ul",[v("li",[t._v("单个系统宕机不影响别的系统正常运行")]),t._v(" "),v("li",[t._v("单个节点所有的负载均衡的分布到了整个系统，做到资源的合理利用")]),t._v(" "),v("li",[t._v("单个系统之间相互透明、解耦")])]),t._v(" "),v("h4",{attrs:{id:"衡量分布式系统的指标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#衡量分布式系统的指标"}},[t._v("#")]),t._v(" 衡量分布式系统的指标")]),t._v(" "),v("ul",[v("li",[t._v("可扩展性")])]),t._v(" "),v("blockquote",[v("p",[t._v("系统的可扩展性(scalability)指分布式系统通过扩展集群机器规模提高系统性能（吞吐、延迟、并发）、存储容量、计算能力的特性。\n可扩展性是分布式系统的特有性质，分布式系统的设计初衷就是利用集群多机的能力处理单机无法解决的问题。然而，完成某一具体任务的所\n需要的机器数目即集群规模取决于系统的性能和任务的要求。当任务的需求随着具体业务不断提高时，除了升级系统的性能，另一个做法就是\n通过增加机器的方式扩展系统的规模。好的分布式系统总在追求“线性扩展性”，也就是使得系统的某一指标可以随着集群中的机器数量线性增长。")])]),t._v(" "),v("ul",[v("li",[t._v("高性能")])]),t._v(" "),v("blockquote",[v("p",[t._v("无论是分布式系统还是单机系统，都会对性能(performance)有所要求。对于不同的系统，不同的服务，关注的性能不尽相同、甚至相互\n矛盾。常见的性能指标有：系统的吞吐能力，指系统在某一时间可以处理的数据总量，通常可以用系统每秒处理的总的数据量来衡量；系统的\n响应延迟，指系统完成某一功能需要使用的时间；系统的并发能力，指系统可以同时完成某一功能的能力，\n通常也用 QPS(query per second)来衡量。上述三个性能指标往往会相互制约，追求高吞吐的系统，往往很难做到低延迟；系统平均响应时间\n较长时，也很难提高 QPS。")])]),t._v(" "),v("ul",[v("li",[t._v("高可用")])]),t._v(" "),v("blockquote",[v("p",[t._v("系统的可用性(availability)指系统在面对各种异常时可以正确提供服务的能力。系统的可用性可以用系统停服务的时间与正常服务的时间\n的比例来衡量，也可以用某功能的失败次数与成功次数的比例来衡量。可用性是分布式的重要指标，衡量了系统的鲁棒性，\n是系统容错能力的体现。")])]),t._v(" "),v("ul",[v("li",[t._v("一致性")])]),t._v(" "),v("blockquote",[v("p",[t._v("分布式系统为了提高可用性，总是不可避免的使用副本的机制，从而引发副本一致性的问题。根据具体的业务需求的不同，分布式系统总是\n提供某种一致性模型，并基于此模型提供具体的服务。越是强的一致的性模型，对于用户使用来说使用起来越简单。例如通常我们总是希望\n某次更新后可以立刻读到最新的修改，如果成功更新后的数据依旧有可能不一致读到旧数据，那么用户就需要在写入数据时加入序列号等信息，\n并在读取数据时首先自行实现过滤去重后再使用数据。主数据与副本数据一致")])]),t._v(" "),v("h4",{attrs:{id:"zabbix监控"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#zabbix监控"}},[t._v("#")]),t._v(" Zabbix监控")]),t._v(" "),v("blockquote",[v("p",[t._v("监控服务器硬件信息的平台。它能采集web服务器、应用服务器、数据库服务器的CPU，内存，IO，网卡，系统负载，目录空间，连接数等数\n据，并有标准的告警值配置。当服务器达到告警值会进行微信，短信的告警，收到告警信息我们需要及时反馈给运维值班人员.")])]),t._v(" "),v("h4",{attrs:{id:"二分查找法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二分查找法"}},[t._v("#")]),t._v(" 二分查找法")]),t._v(" "),v("h4",{attrs:{id:"线性结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线性结构"}},[t._v("#")]),t._v(" 线性结构")])])}),[],!1,null,null,null);a.default=e.exports}}]);