(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{515:function(e,s,t){"use strict";t.r(s);var r=t(4),a=Object(r.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h4",{attrs:{id:"linux常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux常用命令"}},[e._v("#")]),e._v(" linux常用命令")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("cat /proc/cpuinfo  # 查看cpu信息\ncat /proc/meminfo  # 查看内存信息\nuname -r # 查看内核信息，Docker要求CentOS必须是64位，且内核是3.10及以上\nsudo reboot # 重启,sudo表示以管理员root身份执行\nsudo halt # 关机\n安装软件\n​ 使用yum，是一个基于rpm的软件包管理工具\n\n​ 用来安装软件包，可以自动解决软件包之间的依赖关系\n\nyum install 软件包名  #　安装\nyum remove 软件包名 # 卸载\n")])])]),t("ul",[t("li",[e._v("删除文件")])]),e._v(" "),t("blockquote",[t("p",[e._v("rm -f index.jsp")])]),e._v(" "),t("ul",[t("li",[e._v("创建一个文件")])]),e._v(" "),t("blockquote",[t("p",[e._v('echo "hello world" > index.jsp')])]),e._v(" "),t("h4",{attrs:{id:"docker是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker是什么"}},[e._v("#")]),e._v(" docker是什么？")]),e._v(" "),t("blockquote",[t("p",[e._v("Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。\nDocker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。\n容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。目前有CE和EE版本，CE为社区版\nEE为企业版")])]),e._v(" "),t("h4",{attrs:{id:"linux下安装docker-并启动服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux下安装docker-并启动服务"}},[e._v("#")]),e._v(" linux下安装docker，并启动服务")]),e._v(" "),t("p",[t("img",{attrs:{src:"/img/docker.png",alt:""}})]),e._v(" "),t("ul",[t("li",[e._v("查看系统版本号以安装适配版本")])]),e._v(" "),t("blockquote",[t("p",[e._v("uname -r")])]),e._v(" "),t("ul",[t("li",[e._v("建议首先更新yum源 yum update")]),e._v(" "),t("li",[e._v("安装并运行Docker")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    // 安装docker的依赖包\n    sudo yum install -y yum-utils \\\n    device-mapper-persistent-data \\\n    lvm2\n    \n   // 设置稳定仓库\n   sudo yum-config-manager \\\n       --add-repo \\\n       https://download.docker.com/linux/centos/docker-ce.repo\n    \n    // 安装最新版本   \n    sudo yum install docker-ce docker-ce-cli containerd.io   \n   \n   //指定版本安装\n   yum list docker-ce --showduplicates | sort -r\n   sudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n   \n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br")])]),t("ul",[t("li",[e._v("配置镜像加速")])]),e._v(" "),t("blockquote",[t("p",[e._v('修改etc/docker的 daemon.json文件，不存在就新建，添加镜像加速地址，如\n{\n"registry-mirrors": ["https://qps9evve.mirror.aliyuncs.com"]\n}\n配置完后需要手动更新服务：\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker')])]),e._v(" "),t("ul",[t("li",[e._v("启动")])]),e._v(" "),t("blockquote",[t("p",[e._v("sudo systemctl start docker")])]),e._v(" "),t("ul",[t("li",[e._v("验证是否安装成功")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker info\n或者运行 hello-world 映像来验证是否正确安装了 Docker Engine-Community 。\nsudo docker run hello-world")])]),e._v(" "),t("h4",{attrs:{id:"linux删除docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux删除docker"}},[e._v("#")]),e._v(" linux删除docker")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("sudo yum remove docker \\\n                 docker-client \\\n                 docker-client-latest \\\n                 docker-common \\\n                 docker-latest \\\n                 docker-latest-logrotate \\\n                 docker-logrotate \\\n                 docker-engine\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("h4",{attrs:{id:"设置docker国内镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置docker国内镜像"}},[e._v("#")]),e._v(" 设置docker国内镜像")]),e._v(" "),t("blockquote",[t("p",[e._v('在 /etc/docker/daemon.json 中写入如下内容（如果文件不存在请新建该文件）：\ntouch daemon.json\nvim daemon.json\n{"registry-mirrors":["https://registry.docker-cn.com"]}\n之后重新启动服务：\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart docker')])]),e._v(" "),t("h4",{attrs:{id:"docker卸载镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker卸载镜像"}},[e._v("#")]),e._v(" docker卸载镜像")]),e._v(" "),t("ul",[t("li",[e._v("先停止后卸载")])]),e._v(" "),t("blockquote",[t("p",[e._v('docker ps -a 找出  "CONTAINER ID"'),t("br"),e._v("\n然后 停止它 docker stop c608062bf46f\n删除它（进程干掉）：docker rm c608062bf46f\ndocker images 找出镜像id\n最后卸载该镜像 docker rmi 4ab4c602aa5e")])]),e._v(" "),t("h4",{attrs:{id:"docker-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-命令"}},[e._v("#")]),e._v(" docker 命令")]),e._v(" "),t("ul",[t("li",[e._v("docker search 搜索的镜像名：搜索镜像")]),e._v(" "),t("li",[e._v("docker pull 镜像名：下载镜像")]),e._v(" "),t("li",[e._v("docker images ：查看镜像")]),e._v(" "),t("li",[e._v("docker rmi -f 镜像或者tag  :删除镜像")])]),e._v(" "),t("blockquote",[t("p",[e._v("-f 表示强制删除")])]),e._v(" "),t("ul",[t("li",[e._v("docker image inspect java:8 查询原信息，包含安装路径等")]),e._v(" "),t("li",[e._v("docker查看启动日志")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker container ps查看运行的容器\ndocker container logs tag名字，如docker container logs tomcat")])]),e._v(" "),t("ul",[t("li",[e._v("docker run --name tomcat -p 8888:8080 -d tomcat")])]),e._v(" "),t("blockquote",[t("p",[e._v("-p指定端口号映射；\n-d表示后台运行；\n--name 给镜像起个名字，该名称不可重复以示唯一")])]),e._v(" "),t("ul",[t("li",[e._v("docker exec ：在运行的容器中执行命令")]),e._v(" "),t("li",[e._v("语法：docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n"),t("ul",[t("li",[t("p",[e._v("OPTIONS说明：")]),e._v(" "),t("p",[e._v("-d :分离模式: 在后台运行")]),e._v(" "),t("p",[e._v("-i :即使没有附加也保持STDIN 打开")]),e._v(" "),t("p",[e._v("-t :分配一个伪终端")])])])])]),e._v(" "),t("blockquote",[t("p",[e._v("exit退出当前docker容器"),t("br"),e._v("\n如： docker exec -it 镜像名称 /bin/bash")])]),e._v(" "),t("ul",[t("li",[e._v("如何将本地文件copy到docker镜像中")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker cp 本地路径 容器Id或name:容器目录\n如：docker cp /usr/local/ssm.war tom:/usr/local/tomcat/webapps/ssm.war")])]),e._v(" "),t("ul",[t("li",[e._v("将docker内文件拷贝到本地文件夹内")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker cp 容器Id:本地路径 镜像路径\n如：docker cp tom:/usr/local/tomcat/webapps/ssm.war  /usr/local/ssm.war")])]),e._v(" "),t("ul",[t("li",[e._v("docker基于已有镜像创建新的镜像")])]),e._v(" "),t("blockquote",[t("p",[e._v('docker commit -m="描述" -a="作者" 容器ID或者tag\n如：docker commit -m="my first image" -a="sky" tom:v1')])]),e._v(" "),t("h4",{attrs:{id:"dockerfile-构建镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-构建镜像"}},[e._v("#")]),e._v(" dockerfile 构建镜像")]),e._v(" "),t("ul",[t("li",[e._v("dockerfile是什么？")])]),e._v(" "),t("blockquote",[t("p",[e._v("构建镜像的命令集")])]),e._v(" "),t("ul",[t("li",[e._v("如何创建？")])]),e._v(" "),t("blockquote",[t("p",[e._v("首先需要编写Dockerfile文件  vim Dockerfile\n如：")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FROM hub.c.163.com/netease_comb/debian:7.9\nMAINTAINER netease\t\n\n# 更新软件源\nRUN echo "deb http://mirrors.163.com/debian/ wheezy main non-free contrib" >/etc/apt/sources.list\nRUN echo "deb http://mirrors.163.com/debian/ wheezy-updates main non-free contrib" >>/etc/apt/sources.list\nRUN echo "deb http://mirrors.163.com/debian/ wheezy-backports main non-free contrib" >>/etc/apt/sources.list\nRUN echo "deb-src http://mirrors.163.com/debian/ wheezy main non-free contrib" >>/etc/apt/sources.list\nRUN echo "deb-src http://mirrors.163.com/debian/ wheezy-updates main non-free contrib" >>/etc/apt/sources.list\nRUN echo "deb-src http://mirrors.163.com/debian/ wheezy-backports main non-free contrib" >>/etc/apt/sources.list\nRUN echo "deb http://mirrors.163.com/debian-security/ wheezy/updates main non-free contrib" >>/etc/apt/sources.list\nRUN echo "deb-src http://mirrors.163.com/debian-security/ wheezy/updates main non-free contrib" >>/etc/apt/sources.list\nRUN apt-get update\t\n\n# 安装常用软件\nRUN apt-get install -y openssh-server apt-utils tomcat7\nRUN rm -rf /var/lib/apt/lists/*\t\n\n# 设置允许root ssh远程登录\nRUN sed -i s/"PermitRootLogin without-password"/"PermitRootLogin yes"/g /etc/ssh/sshd_config\t\n\nADD docker-tomcat7 /etc/init.d/tomcat7\nRUN chmod +x /etc/init.d/tomcat7\t\n\n# 容器需要开放SSH 22端口\nEXPOSE 22\nEXPOSE 8080\t\n\n# SSH终端服务器作为后台运行\nENTRYPOINT /etc/init.d/tomcat7 start && /usr/sbin/sshd -D\n\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br"),t("span",{staticClass:"line-number"},[e._v("25")]),t("br"),t("span",{staticClass:"line-number"},[e._v("26")]),t("br"),t("span",{staticClass:"line-number"},[e._v("27")]),t("br"),t("span",{staticClass:"line-number"},[e._v("28")]),t("br"),t("span",{staticClass:"line-number"},[e._v("29")]),t("br"),t("span",{staticClass:"line-number"},[e._v("30")]),t("br"),t("span",{staticClass:"line-number"},[e._v("31")]),t("br")])]),t("ul",[t("li",[e._v("如何发布镜像？")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker build -f Dockerfile -t forest/pro .\n-f 文件名\n-t 作者\n. 当前路径")])]),e._v(" "),t("h4",{attrs:{id:"docker安装-mysql"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker安装-mysql"}},[e._v("#")]),e._v(" docker安装 MySQL")]),e._v(" "),t("ul",[t("li",[e._v("1、查看MySQL镜像")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker search mysql")])]),e._v(" "),t("ul",[t("li",[e._v("2、拉取 MySQL 镜像")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker pull mysql:latest\nsudo docker pull mysql:5.7 指定版本")])]),e._v(" "),t("ul",[t("li",[e._v("3、查看本地镜像")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker images")])]),e._v(" "),t("ul",[t("li",[e._v("4、运行")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker run -itd --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root mysql\ndocker exec -it mysql bash\nmysql -u root -p\nALTER USER 'root'@'localhost' IDENTIFIED BY 'root@123456';\nFLUSH PRIVILEGES")])]),e._v(" "),t("ul",[t("li",[e._v("查看镜像")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker images")])]),e._v(" "),t("ul",[t("li",[e._v("查看运行中的")])]),e._v(" "),t("blockquote",[t("p",[e._v("docker ps -a")])]),e._v(" "),t("h4",{attrs:{id:"启动tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动tomcat"}},[e._v("#")]),e._v(" 启动tomcat")]),e._v(" "),t("blockquote",[t("p",[e._v("docker run -it --rm -p 8888:8080 -v $PWD/webapps:/usr/local/tomcat/webapps tomcat")])]),e._v(" "),t("h4",{attrs:{id:"docker-tag重命名指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-tag重命名指令"}},[e._v("#")]),e._v(" docker tag重命名指令")]),e._v(" "),t("blockquote",[t("p",[e._v("docker tag  原镜像名  重命名后的镜像名")])]),e._v(" "),t("h4",{attrs:{id:"docker删除镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker删除镜像"}},[e._v("#")]),e._v(" docker删除镜像")]),e._v(" "),t("blockquote",[t("p",[e._v("需要先停止运行中的镜像，然后再删除镜像\ndocker stop 镜像ID   停止\ndocker rm   镜像ID   删除进程\ndocker rmi  镜像ID   删除镜像")])]),e._v(" "),t("h4",{attrs:{id:"使用dockerfile快速构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用dockerfile快速构建"}},[e._v("#")]),e._v(" 使用dockerfile快速构建")]),e._v(" "),t("ul",[t("li",[e._v("首先编写dockerfile文件")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('FROM java:8\nADD renren-fast.jar /renren-fast.jar\nEXPOSE 8080/TCP\nENTRYPOINT ["java","-jar","/renren-fast.jar"]\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("ul",[t("li",[e._v("然后执行build命令，如下图\n"),t("img",{attrs:{src:"/img/spring-boot-docker.png",alt:""}})])])])}),[],!1,null,null,null);s.default=a.exports}}]);