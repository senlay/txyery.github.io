(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{584:function(t,a,e){"use strict";e.r(a);var r=e(4),l=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),e("blockquote",[e("p",[t._v("核心逻辑 ：路由转发 + 执行过滤器链")])]),t._v(" "),e("ul",[e("li",[t._v("Route路由")])]),t._v(" "),e("blockquote",[e("p",[t._v("路由是构建网关的基础，它是由ID，目标URI,一系列的断言和过滤组成，如果断言为true则匹配该路由")])]),t._v(" "),e("ul",[e("li",[t._v("Predicate断言")])]),t._v(" "),e("blockquote",[e("p",[t._v("参考的是Java8的Predicate,开发人员可以匹配HTTP请求中的所有内容（例如请求头或者请求参数），如果请求和断言相匹配则进行路由")])]),t._v(" "),e("ul",[e("li",[t._v("Filter过滤")])]),t._v(" "),e("blockquote",[e("p",[t._v("指的是Spring框架中GatewayFilter的实例，使用过滤器，可以在请求被路由前或者之后对请求进行修改\n"),e("img",{attrs:{src:"/img/springcloud/gateWay2.png",alt:"GateWay工作流程"}})])]),t._v(" "),e("p",[t._v("web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。\npredicate就是匹配的条件。\nfilter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上uri，就可以实现一个具体的路由了。")]),t._v(" "),e("h3",{attrs:{id:"工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),e("p",[e("img",{attrs:{src:"/img/springcloud/gateWay.png",alt:"GateWay工作流程"}})]),t._v(" "),e("ul",[e("li",[e("ol",[e("li",[t._v("客户端向gateway发出请求，然后在Gateway Handler Mapping中找到与之相匹配的路由，将其发送到GateWay Web Handler")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[t._v("Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"3"}},[e("li",[t._v("Filter 在 “pre” 类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等；在 “post” 类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等，有着非常重要的作用")])])])])])}),[],!1,null,null,null);a.default=l.exports}}]);