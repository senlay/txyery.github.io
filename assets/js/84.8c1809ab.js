(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{575:function(v,_,l){"use strict";l.r(_);var t=l(4),o=Object(t.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h5",{attrs:{id:"传统的单体应用"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#传统的单体应用"}},[v._v("#")]),v._v(" 传统的单体应用")]),v._v(" "),l("ul",[l("li",[v._v("所有功能堆积一起")]),v._v(" "),l("li",[v._v("表现形式为war或者jar包")]),v._v(" "),l("li",[v._v("略显臃肿，极有可能因为一个bug导致整个系统瘫痪")])]),v._v(" "),l("h5",{attrs:{id:"向微服务架构探索"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#向微服务架构探索"}},[v._v("#")]),v._v(" 向微服务架构探索")]),v._v(" "),l("blockquote",[l("p",[v._v("像社会不断发展一样，传统的单体应用越发难以适应快速发展的企业，于是就有了对单体应用的改造，人们开始对单体应用进行拆分，解耦，如\n各系统之间通过webservice等交互，虽然一定程度上缓解了系统压力，但用户量依然疯狂增加，系统压力不断增大，进而出现了dubbo,dubbo专注\n于远程调用，服务调用方不再需要关注服务提供方的地址，只需要从注册衷心获取服务提供方的地址即可。那么既然dubbo如此优秀，我们为何要学习\nspringcloud呢？")])]),v._v(" "),l("ul",[l("li",[v._v("社区支持")]),v._v(" "),l("li",[v._v("组件丰富")]),v._v(" "),l("li",[v._v("性能问题")])]),v._v(" "),l("blockquote",[l("p",[v._v("dubbo是基于netty的tcp及二进制的数据传输，spring cloud是基于http的超文本数据传输，http每次请求都需要创建连接，所有dubbo相对来说较快")])]),v._v(" "),l("h5",{attrs:{id:"spring-cloud是什么"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud是什么"}},[v._v("#")]),v._v(" spring cloud是什么？")]),v._v(" "),l("blockquote",[l("p",[v._v("spring cloud 是一系列有序的框架集合，如服务注册、服务发现、配置中心、消息总线、负载均衡、断路器、数据监控等。")])]),v._v(" "),l("h5",{attrs:{id:"spring-cloud模块介绍"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud模块介绍"}},[v._v("#")]),v._v(" spring cloud模块介绍？")]),v._v(" "),l("ul",[l("li",[v._v("Eureka:服务注册中心，用于服务管理")]),v._v(" "),l("li",[v._v("Ribbon:基于客户端的负载均衡组件")]),v._v(" "),l("li",[v._v("Hystrix:容错框架，可防止服务的雪崩效应")]),v._v(" "),l("li",[v._v("Feign:Web服务客户端，能够简化HTTP接口的调用")]),v._v(" "),l("li",[v._v("Zuul:API网关，提供路由转发、请求过滤等")]),v._v(" "),l("li",[v._v("Config:分布式配置管理，如SCM，阿波罗等配置中间件")]),v._v(" "),l("li",[v._v("Sleuth:服务跟踪")]),v._v(" "),l("li",[v._v("Stream:构建消息驱动的微服务应用程序的框架")]),v._v(" "),l("li",[v._v("Bus:消息总线")])]),v._v(" "),l("h5",{attrs:{id:"spring-cloud有哪些优势"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud有哪些优势"}},[v._v("#")]),v._v(" spring cloud有哪些优势")]),v._v(" "),l("ul",[l("li",[v._v("服务快速启动")])]),v._v(" "),l("blockquote",[l("p",[v._v("拆分之后，每个服务都是独立的项目。依赖少了，代码量也会较之前单系统少很多，所有启动肯定快")])]),v._v(" "),l("ul",[l("li",[v._v("服务快速部署")]),v._v(" "),l("li",[v._v("更加适合敏捷开发")])]),v._v(" "),l("blockquote",[l("p",[v._v("敏捷开发以用户的需求进化为中心，采用迭代、循序渐进的方式进行。服务拆分可以快速发布版本，修改哪个服务就发布哪个服务即可，\n不需要整体发布。")])]),v._v(" "),l("ul",[l("li",[v._v("单独部署，职责专一")])]),v._v(" "),l("blockquote",[l("p",[v._v("每个服务专注于一件事情，每个团队专业负责某个服务，如SCM配置管理，只关心配置管理，dubbo只关心远程调用；xxl-job只关心任务调度")])]),v._v(" "),l("ul",[l("li",[v._v("服务可以动态的扩容")])]),v._v(" "),l("blockquote",[l("p",[v._v("如果某个系统服务的访问量突然增加，那么我们可以针对该系统进行动态扩容")])]),v._v(" "),l("ul",[l("li",[v._v("代码的复用")])]),v._v(" "),l("blockquote",[l("p",[v._v("微服务后，每个服务都有自身的REST API，所有基础的服务都可以抽取出来，很多底层实现都是通过接口实现的。例如：企业的主数据，如城市地点、发票等数据")])]),v._v(" "),l("h5",{attrs:{id:"spring-cloud有哪些劣势"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#spring-cloud有哪些劣势"}},[v._v("#")]),v._v(" spring cloud有哪些劣势")]),v._v(" "),l("ul",[l("li",[v._v("分布式部署，增加复杂度")])]),v._v(" "),l("blockquote",[l("p",[v._v("在分布式系统中，每个服务都分开部署，通过HTTP来进行通信，这当然会产生很多问题，如网络问题、容错问题、调用关系等。")])]),v._v(" "),l("ul",[l("li",[v._v("独立的数据库，如果数据不一致怎么办")])]),v._v(" "),l("blockquote",[l("p",[v._v('每个服务都有自身的数据库，所谓去中心化服务管理便是如此。这样的优点：各服务可根据自身需要选择数据库，但是缺点就是事务的问题了。目前解决的方案有\n"柔性事务中的最终一致性"。')])]),v._v(" "),l("ul",[l("li",[v._v("测试的难度提升")]),v._v(" "),l("li",[v._v("运维的难度提升")])]),v._v(" "),l("h5",{attrs:{id:"总结"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),l("blockquote",[l("p",[v._v("以往的学习路上，总是比较散碎的学习某个知识点，以至于未能形成一个脉络清晰的知识体系。今天偶然借阅到《spring cloud微服务入门、实践与进阶》这本书，使我大受裨益。\n下面将静下心来学习本书。因为spring cloud是基于springboot快速开发的，所以学习springcloud需要具备springboot相关的知识，下一章节将学习spring-boot。")])])])}),[],!1,null,null,null);_.default=o.exports}}]);