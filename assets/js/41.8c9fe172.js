(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{531:function(n,s,e){"use strict";e.r(s);var a=e(4),t=Object(a.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("ul",[e("li",[n._v("单元测试：一个方法的测试，main函数的测试，属于白盒测试")]),n._v(" "),e("li",[n._v("集成测试：将多个单元相互作用，形成一个整体，对整体协调性进行测试")]),n._v(" "),e("li",[n._v("白盒测试：程序员自己完成")]),n._v(" "),e("li",[n._v("黑盒测试：功能测试，将程序当成黑盒子，不考虑程序内部结构，随意测试，由使用者完成")]),n._v(" "),e("li",[n._v("自动测试：用程序反复、批量的测试")]),n._v(" "),e("li",[n._v("手动测试：手动测试")]),n._v(" "),e("li",[n._v("回归测试：修改代码以后，重新进行测试以确保修改的代码没有引入新的错误或者导致其他代码产生错误")])]),n._v(" "),e("h4",{attrs:{id:"java-之-mock"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-之-mock"}},[n._v("#")]),n._v(" java 之 mock")]),n._v(" "),e("blockquote",[e("p",[n._v("Mock 是指使用各种技术手段模拟出各种需要的资源以供测试使用。\n被 Mock 的资源通常有以下特征：\n被测目标依赖该资源\n该资源可能因为各种原因不稳定、返回结果不断变化或者并不总是能够获取到\n该资源跟被测目标本身质量无关\n这些资源可能是一个外部或底层接口、一个系统、一组数据对象或者是一整套目标软件的工作环境等。通过 Mock 避免对外部真实资源的依赖实现对被测目标的孤立测试，从而大大降低测试的难度，节约测试成本。\n需要注意的是利用 Mock 通过的测试与使用真实环境通过的测试毕竟还是有一定差别的。有些时候我们就是需要所测试的系统能够处理依赖所产生的各种情况，包括正常情况和异常情况，我们同样不能保证我们的Mock 可以模拟到每种这样的情况。因此只在确实有必要的情况下才运用Mock。")])]),n._v(" "),e("ul",[e("li",[n._v("什么是关键的Mock概念？")])]),n._v(" "),e("blockquote",[e("p",[n._v("当谈到mock时，你只需要3件事情就需要担心; 扼杀，设定期望和验证。 某些单元测试场景不涉及任何这些情况，其他单独测试场景只涉及桩杆，而其他则涉及设置预期和验证。")])]),n._v(" "),e("ul",[e("li",[n._v("测试桩")])]),n._v(" "),e("blockquote",[e("p",[n._v("Stubbing是告诉你的假的过程，当它与它进行交互时如何表现。 您通常可以存放公共属性（带有getter和/或setter的公共属性）和公共函数。\n说到stubbing功能，你通常有很多选择。 您可能希望返回特定值，抛出错误或调度事件。 此外，您可能希望指示函数的行为方式取决于调用方式（即通过匹配传递给函数的参数的类型或值）。\n如果这听起来像是很多的工作，它可以是，但它一般不是。 许多mock框架的一个很大的特点是你不需要stub void函数。 您也不必在执行测试过程中存储任何未被调用的函数或未查询的属性。")])]),n._v(" "),e("ul",[e("li",[n._v("设定期望")])]),n._v(" "),e("blockquote",[e("p",[n._v("假冒的主要特征之一就是能够告诉假冒测试运行时的期望。 例如，您可能希望调用一个特定的函数3次。 你可能期望它永远不会被调用。 您可能希望它至少被调用两次，但不要超过5次。 您可能希望使用特定类型的参数或特定值或上述任何组合来调用它。 可能性是无止境的。\n设定期望是告诉你假的你会发生什么的过程。 记住，由于它是假的，实际上没有发生。 但是，你被测试的班级并不聪明。 从它的角度来看，它调用了这个函数，并期望它做了它应该做的任何事情。\n对于什么是值得的，大多数嘲笑框架可以让您创建接口或公共类的模拟。 您不限于仅仅模拟接口。")])]),n._v(" "),e("ul",[e("li",[n._v("验证")])]),n._v(" "),e("blockquote",[e("p",[n._v("设定期望和验证是并存的。 在调用被测试类的函数之前，设置期望值。 验证完成。 所以，首先你设定了期望，然后验证你的期望是否得到满足。")])]),n._v(" "),e("ul",[e("li",[e("p",[n._v("获取帮助\n"),e("a",{attrs:{href:"https://github.com/hehonghui/mockito-doc-zh",target:"_blank",rel:"noopener noreferrer"}},[n._v("mock官方简介"),e("OutboundLink")],1),n._v('{:target="_blank"}')])]),n._v(" "),e("li",[e("p",[n._v("引入pom")])])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v(" <dependency>\n            <groupId>org.mockito</groupId>\n            <artifactId>mockito-all</artifactId>\n            <version>1.10.19</version>\n        </dependency>\n        <dependency>\n            <groupId>org.testng</groupId>\n            <artifactId>testng</artifactId>\n            <version>6.14.3</version>\n        </dependency>\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("ul",[e("li",[n._v("如何使用")])]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('\n    @InjectMocks\n    private SysServiceImpl us = new SysServiceImpl();\n    \n     @Mock\n     private UserService userService;\n    \n     @BeforeClass\n     @BeforeMethod\n     public void setUp() {\n            MockitoAnnotations.initMocks(this);\n     }\n\n\n\n   @Test\n    public void test() {\n        String code = "20";\n        PowerMockito.when(userService.addUser(Mockito.any(User.class))).thenReturn(true);\n       us.add(new User());\n    }  \n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);